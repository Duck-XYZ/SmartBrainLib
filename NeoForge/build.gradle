plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.122'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id 'com.modrinth.minotaur' version '2.8.3'
}

archivesBaseName = "${mod_name}-neoforge-${minecraft_version}"

minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

        modSource project.sourceSets.main
        modSource project(":Common").sourceSets.main
    }

    client {
        //taskName 'Client'
    }

    server {
        //taskName 'Server'
        //args '--nogui'
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":Common")
}

tasks.withType(JavaCompile).matching(it -> !it.name.startsWith("neo")).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(":Common").sourceSets.main.allSource)
}

def replaceProperties = [
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_version            : version,
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        neoforge_version       : neoforge_version,
        neoforge_version_range : neoforge_version_range,
        neoforge_loader_version_range   : neoforge_loader_version_range
]

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }

    exclude '**/*.accesswidener'
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
        ])
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = archivesBaseName
            artifact jar
            artifact sourcesJar
        }
    }
}

task publishToCurseForge(type:  net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_TOKEN") ?: "Invalid/No API Token Found"

    def mainFile = upload(661293, jar)
    mainFile.releaseType = "release"
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java 21")
    mainFile.changelog = "https://github.com/Tslat/SmartBrainLib/commits/1.20.6"
    mainFile.displayName = "${project.mod_name} NeoForge ${project.minecraft_version}-${project.version}"

    //https://github.com/Darkhax/CurseForgeGradle#available-properties
}

modrinth {
    token = System.getenv("modrinthKey")
    projectId = mod_id
    versionNumber = project.version
    versionType = "release"
    uploadFile = jar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["neoforge"]
}